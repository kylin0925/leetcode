from typing import List


# class Solution:
#     def restoreArray(self, adjacentPairs: List[List[int]]) -> List[int]:
#         visit = [ 0 for i in range(len(adjacentPairs)+1)]
#         e = set()
#         for i in adjacentPairs:
#             e = e.union(i)
#         res = []
#         self.found = False
#         def dfs(t):
#             #print(res)
#             if len(res) == len(adjacentPairs) +1:
#                 self.found=True
#
#             for i,e in enumerate(adjacentPairs):
#                 if visit[i] == 0:
#                     visit[i]=1
#                     if e[0] == t:
#                         res.append(e[1])
#                         dfs(e[1])
#                         if self.found:
#                             return
#                         res.pop(-1)
#                     elif e[1] == t:
#                         res.append(e[0])
#                         dfs(e[0])
#                         if self.found:
#                             return
#                         res.pop(-1)
#                     visit[i] = 0
#
#
#         for i in e:
#             res.append(i)
#             dfs(i)
#             if self.found:
#                 break
#             res.pop(-1)
#
#
#         return res
class Solution:
    def restoreArray(self, adjacentPairs: List[List[int]]) -> List[int]:
        g = {}
        nodnums = {}
        for p in adjacentPairs:
            n = nodnums.get(p[0],0)
            nodnums[p[0]] = n+1
            n = nodnums.get(p[1], 0)
            nodnums[p[1]] = n + 1

            n = g.get(p[0],[])
            g[p[0]] = n+[p[1]]
            n = g.get(p[1], [])
            g[p[1]] = n + [p[0]]

        #print("g",g)
        #print(nodnums)
        start = -1
        for k in nodnums.keys():
            if nodnums[k]==1:
                #print(k)
                start = k
                break
        res = []
        f = {}
        def dfs(k):
            #print(k)
            if f.get(k)==None:
                f[k]=1
                res.append(k)
            else:
                return
            if len(res) == len(adjacentPairs)+1:
                return
            for i in g[k]:
                dfs(i)
        dfs(start)
        return res

print(Solution().restoreArray(adjacentPairs = [[2,1],[3,4],[3,2]]))
print(Solution().restoreArray(adjacentPairs = [[4,-2],[1,4],[-3,1]]))
print(Solution().restoreArray( adjacentPairs = [[100000,-100000]]))
print(Solution().restoreArray( adjacentPairs = [[6393,-24970],[16612,25206],[-54414,85015],[96301,-77991],[97060,11321],[98263,81954],[-66167,-86890],[49476,-41247],[-57496,35910],[-90978,79368],[-65454,83981],[-37259,73135],[-83609,-41683],[-27433,-58310],[-77991,43059],[-20253,84558],[45215,-51542],[5997,-42368],[65223,47571],[-42600,-53137],[11283,47688],[-59722,85104],[86798,-33712],[-27739,-75347],[-97535,13989],[83763,4126],[-65035,-47957],[-20329,-77206],[-91523,83250],[-35155,-2662],[55114,88501],[-26226,44574],[970,-33879],[57122,12913],[-95704,21468],[-3688,-23317],[71844,11374],[70274,12454],[-97215,16612],[-20358,74343],[44263,-65410],[50140,-80362],[9290,-53457],[-2157,-66557],[53605,10145],[65141,-55052],[-56365,71217],[53120,69137],[-47840,18672],[91780,-51279],[57245,-76450],[-48482,-15268],[-80378,50140],[-2834,23379],[29123,93173],[45215,54280],[60420,70272],[-51279,18728],[67404,9290],[-26423,-90656],[33881,47492],[-83735,-920],[80675,11283],[-70842,-5010],[-20144,39636],[15141,-44220],[85274,97802],[35910,73135],[-81255,-79213],[-65360,80200],[-83735,73703],[5823,29017],[23219,-42938],[67043,82203],[84558,-30864],[-81391,-14695],[-46805,-66395],[-13666,-66257],[77014,-51542],[81954,50185],[12913,77014],[-95102,-58310],[61239,61814],[48294,94861],[11454,-32834],[58487,-97821],[70274,88242],[56853,-43252],[-4072,-51642],[5823,-2662],[-79735,43860],[-45001,-51127],[-9366,70686],[65969,-45100],[82237,-69305],[69986,-85945],[-89960,-90472],[-23424,-87332],[69258,-57749],[80174,-77206],[47571,-50199],[-12281,-34914],[86481,-80378],[39636,-97821],[63869,58778],[-67135,-61715],[50922,75530],[51746,30863],[-5294,-66167],[45916,-20358],[1240,-53961],[-9767,-33459],[-46943,-29760],[-27739,94861],[-52846,-38203],[37974,-13666],[-65035,-61715],[-37200,-47957],[-91481,-71331],[13989,21407],[-47840,-67605],[8012,90771],[-43921,-35155],[30821,-65410],[-71793,84189],[-36027,90618],[64148,-91007],[30591,-5010],[98659,37223],[-86211,65141],[-76510,54280],[81533,50488],[-3380,90618],[64938,48308],[-32834,64148],[-13162,-24869],[34477,-91481],[-98699,5123],[-92522,51922],[-26423,-86211],[32546,60755],[44263,51922],[58778,34604],[-65360,-91661],[-7234,-35315],[82103,2050],[48294,-66557],[43860,-80328],[-52228,-6164],[-31000,-34129],[-79542,-80362],[3237,63869],[11404,-27552],[-42600,58004],[-84714,-69305],[47347,83912],[89224,99090],[-15729,73385],[30821,33454],[-52007,-50407],[88501,-54805],[30581,40818],[60755,99090],[73385,22669],[82358,71988],[-48394,60921],[-88447,-56095],[97102,-49648],[-54374,-35315],[56861,67043],[24812,-95442],[-32617,-52228],[6101,-2027],[-49648,-92256],[-85239,23219],[-95442,79305],[49476,11404],[-3390,-79815],[31159,81288],[99626,53083],[-31000,-37264],[-95858,53175],[-15558,93369],[78324,-6822],[73869,-14695],[-58219,37273],[51363,-53137],[-48295,-23992],[60921,-5841],[95118,-15729],[92579,5997],[56804,-48394],[22669,17952],[89224,11454],[-40254,-8659],[66875,3506],[20721,-69784],[30624,9567],[6393,34789],[42921,3705],[-29760,-13441],[-15395,60934],[964,-89831],[18672,37223],[-60973,81288],[-38640,71713],[-16295,82203],[93173,-87332],[31159,71844],[-1169,-9107],[40818,75612],[-35393,-1166],[46714,52503],[-98492,-26903],[-63528,-23317],[-60836,89118],[3705,-91661],[-33459,-38203],[23155,6101],[51746,99626],[-24847,-42258],[-32730,70272],[1240,-9079],[-30864,99805],[86481,-93234],[75859,73703],[-19099,51669],[42921,-75229],[6657,-21530],[14204,24798],[-52007,53120],[-57496,81146],[66150,17640],[66129,15076],[-6112,24812],[-3549,-13162],[75859,-2157],[-80247,-14675],[4126,-43921],[-32730,65586],[20019,53017],[-67298,85015],[99712,85104],[-20329,30591],[88241,-54607],[69258,-3688],[-21411,66129],[-75347,-65454],[21407,-6820],[-27433,-32758],[10899,59202],[-34129,81146],[80174,66268],[73624,-62979],[-63528,970],[57963,80675],[-24869,-26903],[50922,-26478],[-86805,73869],[-59620,-1893],[-26478,71713],[-89966,34789],[-54551,-45240],[12628,-70721],[-56365,-45001],[-79735,-74070],[-14116,15076],[82237,97102],[3939,-73886],[-21530,32546],[-67135,18728],[-54805,29123],[12454,-37336],[53017,57827],[-18201,-42368],[-2521,11374],[83912,-92522],[-33879,743],[96427,88241],[30581,60934],[42290,12326],[-43706,11099],[-23016,30624],[-16295,-62979],[50185,-66257],[-76510,92579],[-50199,4366],[-80328,18118],[-52184,24711],[86798,-65732],[-52846,-60836],[-42310,96566],[-16484,99171],[83763,-90656],[26066,-98632],[743,-79213],[29268,-5886],[17952,-46308],[57245,-50033],[-25746,-56095],[-7234,15141],[-15395,12628],[79496,-44220],[-35393,-24588],[66875,-25746],[69821,-44119],[65969,-46276],[80200,60668],[-20999,-90293],[-60973,52503],[6657,57827],[-71793,98659],[58487,-32758],[-90293,-13152],[44574,-41642],[-3390,-30536],[-23992,-52184],[8129,-97306],[-45012,77289],[21468,51363],[3506,-20843],[71988,3939],[-46276,47347],[-56153,87846],[62705,2050],[41580,-70842],[66253,19848],[-20144,58004],[-59722,-79160],[-50026,-3380],[-20843,8129],[14557,-40957],[21598,-49944],[-5841,-2834],[34604,6661],[-77875,65165],[-75229,-41683],[-34914,-45100],[77877,96301],[-43706,83999],[-95858,84454],[-32617,82103],[11326,99805],[20721,-97215],[-37501,-37336],[94336,91780],[50488,20046],[33183,-37264],[-44480,67379],[-12281,53175],[70686,-15558],[-58259,-24847],[43776,-12436],[-92030,-94972],[23155,12793],[-3023,93508],[20019,-23424],[-67875,26066],[66150,47492],[-45240,-13032],[-42938,-97306],[69137,48308],[-37501,82358],[-15870,-8453],[65165,18118],[-38760,-68480],[-5294,-86805],[-44679,43110],[-95704,-2731],[-91523,75530],[-74070,-87748],[-57749,-55052],[-46805,33183],[-79815,-10952],[-98699,-19099],[-44679,-52238],[-92030,-42394],[88242,69821],[93369,37273],[-26226,-59620],[96081,-13152],[12793,44914],[-67875,-65732],[-96758,-54374],[-30536,98263],[66253,-87748],[17640,-93791],[964,-51127],[16961,-6822],[95118,99171],[-58259,-89960],[-89966,90771],[-1166,61239],[-1169,37974],[56853,-80247],[-94972,33454],[94336,-39243],[10899,-83502],[-15268,50298],[-49944,-20065],[40429,-6820],[42290,74343],[57963,50298],[-97535,84454],[-21411,81827],[47950,-24970],[-54414,25579],[-98632,16961],[2497,55114],[43059,-85239],[34477,55748],[83250,43776],[95389,23379],[-9107,-84714],[62705,-68480],[65586,85274],[-13032,-42258],[-14116,-71331],[-90472,-50026],[-2027,56861],[77289,-24588],[-15448,-56292],[25206,21995],[47688,-2521],[-46308,-45012],[-95102,-15448],[87846,-6112],[-44480,-88447],[-12436,67379],[-8005,-83609],[-36027,-20065],[81533,-37200],[-20999,12326],[-77875,-37259],[-920,-98755],[86376,19848],[79368,-67605],[57759,43110],[-15870,77877],[65223,24711],[-41247,-23016],[-38640,-42394],[5123,-20253],[78324,44914],[75612,79496],[-50407,-13441],[-58219,-92256],[14557,-98755],[-9366,11099],[-76450,83999],[-46943,14204],[-86890,-35143],[-2731,-4072],[-51642,73624],[46714,-53457],[-93234,-35143],[-1893,39524],[9567,72736],[-40254,-44119],[79305,-9767],[21995,33881],[61814,6661],[40429,-50033],[56804,-53961],[96081,-6164],[-79160,66268],[19160,45916],[10145,69986],[4366,30863],[11321,19160],[-48800,45882],[-16484,21598],[-3549,-56292],[29017,59202],[-41450,-48295],[72736,-8659],[-39208,-81391],[-79542,81827],[71217,-48800],[3237,-52238],[6018,-39243],[86376,93508],[-18201,2497],[-69784,-8453],[-54607,-14675],[-81255,-43252],[24798,6018],[-91007,-66891],[47950,-9079],[64938,55748],[83981,53605],[84189,-56153],[-41450,-85945],[99712,60420],[-54551,96427],[-10952,57122],[51669,20046],[89118,29268],[-96758,60668],[-39208,-38760],[97060,-33712],[-41642,72894],[8012,11326],[-73886,45882],[-42310,53083],[-67298,-48482],[-8005,-27552],[-93791,25579],[-66395,-40957],[-90978,95389],[-3023,-66891],[39524,-83502],[96566,-98492],[-89831,41580],[72894,67404],[-5886,-70721]]))