from typing import List

# class Solution:
#     def minimumTotal(self, triangle: List[List[int]]) -> int:
#         self.minpathsum = 10**9+7
#         depth = len(triangle)
#         memo = [10**9+7 for i in range(depth)]
#         def dfs(i, j, pathsum):
#             print(i, j, pathsum)
#             if i == depth:
#                 if pathsum < self.minpathsum:
#                     self.minpathsum=pathsum
#                     print(pathsum)
#                 return
#             #if memo[i]!= 10**9+7:
#             #    return memo[i]
#             t = triangle[i][j] + pathsum
#             dfs(i+1, j, t)
#             dfs(i+1, j+1, t)
#             print("min sum",i,j,self.minpathsum)
#             memo[i] = self.minpathsum
#         dfs(0,0,0)
#         return self.minpathsum
class Solution:
    def minimumTotal(self, triangle: List[List[int]]) -> int:
        self.minpathsum = 10**9+7
        depth = len(triangle)
        memo = [[10**9+7 for j in range(depth)] for i in range(depth)]
        def dfs(i, j):
            if memo[i][j]!= 10**9+7:
                return memo[i][j]
            if i == depth-1:
                return triangle[i][j]

            ans = min(triangle[i][j] + dfs(i+1,j),triangle[i][j]+dfs(i+1,j+1))
            memo[i][j] = ans
            print("--"*10)
            for m in memo:
                print(m)
            return ans

        return dfs(0,0)

class Solution1:
    def minimumTotal(self, triangle: List[List[int]]) -> int:
        depth = len(triangle)
        dp = [ triangle[-1][i] for i in range(depth)]
        for y in range(depth-2,-1,-1):
            for x in range(y+1):
                dp[x] = min(triangle[y][x] + dp[x], triangle[y][x] + dp[x+1])

        return dp[0]

# import random
# testd = []
# for i in range(30):
#     testd.append([random.randint(-10**4,10**4)  for j in range(i+1) ])
# print(testd)
print(Solution1().minimumTotal(triangle = [[2],[3,4],[6,5,7],[4,1,8,3]]))
# [[2486], [-8653, -4080], [5949, -3621, -6042], [9257, 6072, -8100, 8975], [-9455, 3311, 1494, -2147, 6143], [1624, -721, 5322, -2917, -549, 2929], [-8386, -8350, 660, -5011, -6131, 4830, 4601], [2196, 9225, 1440, -3387, 3641, -1535, 3759, -9737], [-1819, -8551, 1035, -7983, 7284, -236, -1369, -7247, -7008], [-7553, 9028, -4465, -4466, -7550, 3861, 262, -5636, 1982, 9993], [-9053, 2210, -3031, 9766, 8494, -4507, -329, -1966, -1480, -1263, -3718], [-4762, 6902, -3878, 66, 8325, -813, 8259, 4923, 1541, -2443, -7254, -2901], [9277, 6409, -1188, -1170, 2161, 39, 1011, -2071, -1338, 1646, 6289, -8040, -262], [5672, -4306, -983, 1336, 9920, 6490, -3385, -8500, -312, -4796, 1875, -689, -1057, -1381], [-9790, 1093, 4151, -2011, 2572, -4452, 2780, -4277, -495, 6492, -2174, -8834, 8195, -6487, -7038], [-2770, 8136, 5238, -948, 3626, -6784, 1166, 3537, 1090, 1927, -5962, -5326, 2813, -1096, -7225, -9429], [8400, -2707, -8894, -6290, 2902, -6424, -4187, 105, -2549, -8864, -3935, -1193, 1647, -140, -4453, 3610, -8898], [-3332, 7546, 4234, 8251, -328, -1592, 5118, -2339, -8890, -6824, -2768, 4451, -4751, 1747, 4305, 3979, -2173, -6324], [-4658, 1864, -8397, -7359, -7877, 9352, 7520, 6442, -4254, 1641, 6651, 9585, -9069, 6552, -3643, -8856, 2256, -8964, -2880], [8796, -2117, 9164, 2613, -8562, 771, -9089, 8282, -9434, 6857, -7256, 108, -9530, -9176, 1004, -6112, 8747, -6565, -8445, -5043], [-3137, -4246, 3571, 1197, -2020, 836, 5716, 5891, -2950, -8438, 364, -5182, 3541, -8785, -6307, 2765, 2396, -2218, 8150, 8502, -9029], [-491, 6110, 4266, 4506, 9154, -3133, -9274, -2764, 8678, -354, 7206, -1950, 5985, -583, -4717, 4380, 361, 4581, -2794, -1335, 1906, -4382], [79, 6552, 6861, -2695, -7651, 2216, 5072, -5625, 9108, 5488, -8860, -8654, 9337, 8133, -6429, -454, 9765, 2982, 7335, 7253, 4800, 16, 9859], [-465, -2354, -5184, 9060, -1631, 7042, -4706, -8909, 9660, 2829, 521, -1336, 3275, 7529, 112, -9522, 520, -3540, 3323, 7019, 4698, 9742, 1892, 299], [-1149, -8705, 5519, -9934, 8331, -4072, -7547, 1890, -9164, -892, -729, 8367, -8296, -5989, 6676, -80, 3590, 2153, 4175, -7231, -8709, 2504, 215, -8886, -2638], [3466, -3117, -6191, 2731, 5257, -7955, 599, -1354, 6028, 3078, 8690, -3627, -6196, -2587, -6796, 1421, -9630, -5171, -1300, 4757, -1651, -9993, 4091, -8503, 2699, 535], [2768, 8502, -869, -6688, 793, -708, 5893, -3077, 2833, 7298, 3490, -3143, -9952, -9191, -9967, -5381, 2197, -5324, -7119, -6908, 3914, -6364, -343, 3105, 9524, -5454, -7366], [24, -7476, 6560, -6101, -8779, -334, -2176, -4047, -3641, 8937, -568, -665, 8566, -6837, 6095, -1897, 4801, 1025, -2941, 639, 8334, 8127, 7626, 6160, -3009, 8671, 5137, 9045], [9788, -7507, -611, -4426, 3213, -5383, -1978, -7593, 7602, 8567, -5426, 6131, 1414, -7358, -8498, 8830, -2157, -5448, -7035, 7749, 5720, -5085, -9517, 1068, 158, 5453, 4307, 23, 6085], [-8898, -9138, -46, -5652, 8689, 2333, 638, -7725, -863, 9893, 7879, -9975, 197, -3226, 8385, -4327, 3109, 5388, -388, -8831, -3053, 5272, 6832, -3166, 5091, -2592, 1587, 3793, -8064, 7640]]
# -151100
print(Solution1().minimumTotal( [[2486], [-8653, -4080], [5949, -3621, -6042], [9257, 6072, -8100, 8975], [-9455, 3311, 1494, -2147, 6143], [1624, -721, 5322, -2917, -549, 2929], [-8386, -8350, 660, -5011, -6131, 4830, 4601], [2196, 9225, 1440, -3387, 3641, -1535, 3759, -9737], [-1819, -8551, 1035, -7983, 7284, -236, -1369, -7247, -7008], [-7553, 9028, -4465, -4466, -7550, 3861, 262, -5636, 1982, 9993], [-9053, 2210, -3031, 9766, 8494, -4507, -329, -1966, -1480, -1263, -3718], [-4762, 6902, -3878, 66, 8325, -813, 8259, 4923, 1541, -2443, -7254, -2901], [9277, 6409, -1188, -1170, 2161, 39, 1011, -2071, -1338, 1646, 6289, -8040, -262], [5672, -4306, -983, 1336, 9920, 6490, -3385, -8500, -312, -4796, 1875, -689, -1057, -1381], [-9790, 1093, 4151, -2011, 2572, -4452, 2780, -4277, -495, 6492, -2174, -8834, 8195, -6487, -7038], [-2770, 8136, 5238, -948, 3626, -6784, 1166, 3537, 1090, 1927, -5962, -5326, 2813, -1096, -7225, -9429], [8400, -2707, -8894, -6290, 2902, -6424, -4187, 105, -2549, -8864, -3935, -1193, 1647, -140, -4453, 3610, -8898], [-3332, 7546, 4234, 8251, -328, -1592, 5118, -2339, -8890, -6824, -2768, 4451, -4751, 1747, 4305, 3979, -2173, -6324], [-4658, 1864, -8397, -7359, -7877, 9352, 7520, 6442, -4254, 1641, 6651, 9585, -9069, 6552, -3643, -8856, 2256, -8964, -2880], [8796, -2117, 9164, 2613, -8562, 771, -9089, 8282, -9434, 6857, -7256, 108, -9530, -9176, 1004, -6112, 8747, -6565, -8445, -5043], [-3137, -4246, 3571, 1197, -2020, 836, 5716, 5891, -2950, -8438, 364, -5182, 3541, -8785, -6307, 2765, 2396, -2218, 8150, 8502, -9029], [-491, 6110, 4266, 4506, 9154, -3133, -9274, -2764, 8678, -354, 7206, -1950, 5985, -583, -4717, 4380, 361, 4581, -2794, -1335, 1906, -4382], [79, 6552, 6861, -2695, -7651, 2216, 5072, -5625, 9108, 5488, -8860, -8654, 9337, 8133, -6429, -454, 9765, 2982, 7335, 7253, 4800, 16, 9859], [-465, -2354, -5184, 9060, -1631, 7042, -4706, -8909, 9660, 2829, 521, -1336, 3275, 7529, 112, -9522, 520, -3540, 3323, 7019, 4698, 9742, 1892, 299], [-1149, -8705, 5519, -9934, 8331, -4072, -7547, 1890, -9164, -892, -729, 8367, -8296, -5989, 6676, -80, 3590, 2153, 4175, -7231, -8709, 2504, 215, -8886, -2638], [3466, -3117, -6191, 2731, 5257, -7955, 599, -1354, 6028, 3078, 8690, -3627, -6196, -2587, -6796, 1421, -9630, -5171, -1300, 4757, -1651, -9993, 4091, -8503, 2699, 535], [2768, 8502, -869, -6688, 793, -708, 5893, -3077, 2833, 7298, 3490, -3143, -9952, -9191, -9967, -5381, 2197, -5324, -7119, -6908, 3914, -6364, -343, 3105, 9524, -5454, -7366], [24, -7476, 6560, -6101, -8779, -334, -2176, -4047, -3641, 8937, -568, -665, 8566, -6837, 6095, -1897, 4801, 1025, -2941, 639, 8334, 8127, 7626, 6160, -3009, 8671, 5137, 9045], [9788, -7507, -611, -4426, 3213, -5383, -1978, -7593, 7602, 8567, -5426, 6131, 1414, -7358, -8498, 8830, -2157, -5448, -7035, 7749, 5720, -5085, -9517, 1068, 158, 5453, 4307, 23, 6085], [-8898, -9138, -46, -5652, 8689, 2333, 638, -7725, -863, 9893, 7879, -9975, 197, -3226, 8385, -4327, 3109, 5388, -388, -8831, -3053, 5272, 6832, -3166, 5091, -2592, 1587, 3793, -8064, 7640]]))
#print(Solution().minimumTotal(triangle = testd))